# docker-compose.yml
# FastAPI + nginx + MySQL + Elasticsearch

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: dashboard_api_service
    ports:
      - "8000:8000" # FastAPI
    depends_on:
      - db
      - es
      - redis
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: dashboard_db
      ES_HOST: es
      ES_PORT: 9200
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TZ: Asia/Seoul
    # MySQL, Elasticsearch 포트가 열릴 때까지 최대 240초씩 대기 → 준비되면 uvicorn 실행
    command: >
      /bin/sh -c "/wait-for-it.sh db:3306 --timeout=240 --strict && \
      /wait-for-it.sh es:9200 --timeout=240 --strict && \
      /wait-for-it.sh redis:6379 --timeout=240 --strict && \
      uvicorn main:app --host 0.0.0.0 --port 8000"
    volumes:
      - ./api/uploads:/app/uploads

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "3000:80"
    depends_on:
      - api

  db:
    image: mysql:8.0
    container_name: dashboard_mysql_service
    ports:
      - "3306:3306" # 외부 접근 노출(선택)
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: dashboard_db
    volumes:
      - mysql_data:/var/lib/mysql
    # MySQL이 실제로 연결 가능한 상태인지 확인
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elastic_service
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fs http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      bash -c "
        if [ ! -d plugins/analysis-nori ]; then
          elasticsearch-plugin install --batch analysis-nori;
        fi &&
        elasticsearch
      "

  redis:
    image: redis:7-alpine
    container_name: redis_service
    command: >
      redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"

volumes:
  mysql_data:
  es_data:
  # uploads is bind-mounted from host path, no named volume needed
